//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameSettingsContext {

    public GameSettingsEntity planetsPhysicsEntity { get { return GetGroup(GameSettingsMatcher.PlanetsPhysics).GetSingleEntity(); } }
    public PlanetsPhysicsComponent planetsPhysics { get { return planetsPhysicsEntity.planetsPhysics; } }
    public bool hasPlanetsPhysics { get { return planetsPhysicsEntity != null; } }

    public GameSettingsEntity SetPlanetsPhysics(float newMass, float newMinDistanceFromSun, float newDistanceBetweenPlanets, float newMinVelocityY, float newMaxVelocityY, float newMinRotationSpeed, float newMaxRotationSpeed, float newHealth) {
        if (hasPlanetsPhysics) {
            throw new Entitas.EntitasException("Could not set PlanetsPhysics!\n" + this + " already has an entity with PlanetsPhysicsComponent!",
                "You should check if the context already has a planetsPhysicsEntity before setting it or use context.ReplacePlanetsPhysics().");
        }
        var entity = CreateEntity();
        entity.AddPlanetsPhysics(newMass, newMinDistanceFromSun, newDistanceBetweenPlanets, newMinVelocityY, newMaxVelocityY, newMinRotationSpeed, newMaxRotationSpeed, newHealth);
        return entity;
    }

    public void ReplacePlanetsPhysics(float newMass, float newMinDistanceFromSun, float newDistanceBetweenPlanets, float newMinVelocityY, float newMaxVelocityY, float newMinRotationSpeed, float newMaxRotationSpeed, float newHealth) {
        var entity = planetsPhysicsEntity;
        if (entity == null) {
            entity = SetPlanetsPhysics(newMass, newMinDistanceFromSun, newDistanceBetweenPlanets, newMinVelocityY, newMaxVelocityY, newMinRotationSpeed, newMaxRotationSpeed, newHealth);
        } else {
            entity.ReplacePlanetsPhysics(newMass, newMinDistanceFromSun, newDistanceBetweenPlanets, newMinVelocityY, newMaxVelocityY, newMinRotationSpeed, newMaxRotationSpeed, newHealth);
        }
    }

    public void RemovePlanetsPhysics() {
        planetsPhysicsEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameSettingsEntity {

    public PlanetsPhysicsComponent planetsPhysics { get { return (PlanetsPhysicsComponent)GetComponent(GameSettingsComponentsLookup.PlanetsPhysics); } }
    public bool hasPlanetsPhysics { get { return HasComponent(GameSettingsComponentsLookup.PlanetsPhysics); } }

    public void AddPlanetsPhysics(float newMass, float newMinDistanceFromSun, float newDistanceBetweenPlanets, float newMinVelocityY, float newMaxVelocityY, float newMinRotationSpeed, float newMaxRotationSpeed, float newHealth) {
        var index = GameSettingsComponentsLookup.PlanetsPhysics;
        var component = (PlanetsPhysicsComponent)CreateComponent(index, typeof(PlanetsPhysicsComponent));
        component.Mass = newMass;
        component.MinDistanceFromSun = newMinDistanceFromSun;
        component.DistanceBetweenPlanets = newDistanceBetweenPlanets;
        component.MinVelocityY = newMinVelocityY;
        component.MaxVelocityY = newMaxVelocityY;
        component.MinRotationSpeed = newMinRotationSpeed;
        component.MaxRotationSpeed = newMaxRotationSpeed;
        component.Health = newHealth;
        AddComponent(index, component);
    }

    public void ReplacePlanetsPhysics(float newMass, float newMinDistanceFromSun, float newDistanceBetweenPlanets, float newMinVelocityY, float newMaxVelocityY, float newMinRotationSpeed, float newMaxRotationSpeed, float newHealth) {
        var index = GameSettingsComponentsLookup.PlanetsPhysics;
        var component = (PlanetsPhysicsComponent)CreateComponent(index, typeof(PlanetsPhysicsComponent));
        component.Mass = newMass;
        component.MinDistanceFromSun = newMinDistanceFromSun;
        component.DistanceBetweenPlanets = newDistanceBetweenPlanets;
        component.MinVelocityY = newMinVelocityY;
        component.MaxVelocityY = newMaxVelocityY;
        component.MinRotationSpeed = newMinRotationSpeed;
        component.MaxRotationSpeed = newMaxRotationSpeed;
        component.Health = newHealth;
        ReplaceComponent(index, component);
    }

    public void RemovePlanetsPhysics() {
        RemoveComponent(GameSettingsComponentsLookup.PlanetsPhysics);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameSettingsMatcher {

    static Entitas.IMatcher<GameSettingsEntity> _matcherPlanetsPhysics;

    public static Entitas.IMatcher<GameSettingsEntity> PlanetsPhysics {
        get {
            if (_matcherPlanetsPhysics == null) {
                var matcher = (Entitas.Matcher<GameSettingsEntity>)Entitas.Matcher<GameSettingsEntity>.AllOf(GameSettingsComponentsLookup.PlanetsPhysics);
                matcher.componentNames = GameSettingsComponentsLookup.componentNames;
                _matcherPlanetsPhysics = matcher;
            }

            return _matcherPlanetsPhysics;
        }
    }
}
